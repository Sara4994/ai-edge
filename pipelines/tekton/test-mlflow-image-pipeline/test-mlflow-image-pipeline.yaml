apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: test-mlflow-image
spec:
  params:
  - name: model-name
    type: string
  - default: "1"
    name: model-version
    type: string
  - name: test-endpoint
    type: string
  - default: $(context.pipelineRun.namespace)
    name: target-namespace
    type: string
  - name: target-imagerepo
    type: string
  - name: upon-end
    type: string
    default: delete
  results:
  - name: target-registry-url
    value: $(tasks.record-image.results.target-registry-url)
  - name: image-sha
    value: $(tasks.record-image.results.image-sha)
  tasks:
  - name: deploy-container
    params:
    - name: SCRIPT
      value: |
        cat <<EOF | oc apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          creationTimestamp: null
          labels:
            app: $(params.model-name)-$(params.model-version)
          name: $(params.model-name)-$(params.model-version)
          namespace: $(params.target-namespace)
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: $(params.model-name)-$(params.model-version)
          strategy: {}
          template:
            metadata:
              creationTimestamp: null
              labels:
                app: $(params.model-name)-$(params.model-version)
            spec:
              containers:
              - image: $(params.model-name):$(params.model-version)
                name: $(params.model-name)-$(params.model-version)
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /v2/health/live
                    port: 8080
                    scheme: HTTP
                  periodSeconds: 5
                  successThreshold: 1
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /v2/models/$(params.model-name)/ready
                    port: 8080
                    scheme: HTTP
                  periodSeconds: 5
                  successThreshold: 1
                ports:
                - containerPort: 8080
                resources: {}
        status: {}
        EOF
        oc wait deployment -n $(params.target-namespace) $(params.model-name)-$(params.model-version) --for condition=Available=True --timeout=120s
        oc wait pod -n $(params.target-namespace) -l app=$(params.model-name)-$(params.model-version) --for condition=Ready=True --timeout=120s
    taskRef:
      kind: ClusterTask
      name: openshift-client
  - name: create-default-service
    params:
    - name: SCRIPT
      value: oc expose deployment  $(params.model-name)-$(params.model-version) --port=8080
        --target-port=8080 --selector='app=$(params.model-name)-$(params.model-version)'
        --dry-run=client -o yaml |  oc apply -f -
    - name: VERSION
      value: latest
    runAfter:
    - deploy-container
    taskRef:
      kind: ClusterTask
      name: openshift-client
  - name: test-mlflow-rest-svc
    params:
    - name: model-name
      value: $(params.model-name)
    - name: model-version
      value: $(params.model-version)
    - name: test-endpoint
      value: $(params.test-endpoint)
    runAfter:
    - create-default-service
    taskRef:
      kind: Task
      name: test-mlflow-rest-svc
    workspaces:
    - name: test-data
      workspace: test-data
  - name: stop-deployment
    params:
    - name: SCRIPT
      value: |
        if [ "$(params.upon-end)" == "stop" ]; then
          oc scale deployment.apps/$(params.model-name)-$(params.model-version) --replicas=0
        elif [ "$(params.upon-end)" == "delete" ]; then
          oc delete all --selector=app=$(params.model-name)-$(params.model-version)
        elif [ "$(params.upon-end)" == "keep" ]; then
          echo "Keeping the deployment running."
        else
          echo "Invalid value for upon-end parameter."
          exit 1
        fi
    - name: VERSION
      value: latest
    runAfter:
    - test-mlflow-rest-svc
    taskRef:
      kind: ClusterTask
      name: openshift-client
  - name: record-image
    taskRef:
      kind: Task
      name: record-image
    params:
    - name: model-name
      value: $(params.model-name)
    - name: model-version
      value: $(params.model-version)
    - name: namespace
      value: $(params.target-namespace)
    - name: target-registry-url
      value: quay.io/$(params.target-imagerepo)/$(params.model-name)
    runAfter:
    - test-mlflow-rest-svc
  - name: skopeo-copy
    params:
    - name: srcImageURL
      value: docker://image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/$(params.model-name)@$(tasks.record-image.results.image-sha)
    - name: destImageURL
      value: docker://$(tasks.record-image.results.target-registry-url):$(params.model-version)-$(context.pipelineRun.uid)
    - name: srcTLSverify
      value: "true"
    - name: destTLSverify
      value: "true"
    runAfter:
    - record-image
    taskRef:
      kind: Task
      name: skopeo-copy
    workspaces:
    - name: images-url
      workspace: workspace
    - name: dockerconfig
      workspace: dockerconfig
  workspaces:
  - name: workspace
  - name: test-data
  - name: dockerconfig
